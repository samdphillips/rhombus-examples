#lang rhombus

/*
  μKanren: A Minimal Functional Core for Relational Programming
  http://webyrd.net/scheme-2013/papers/HemannMuKanren2013.pdf

  ported to Rhombus (using more native types)
*/

import:
  // Don't forget rhombus/meta or annotations and stuff are harder to type
  rhombus/meta:
    open
    except:
      bind
  lib("racket/base.rkt") as r:
    rename:
      #{hash-ref}        as hash_ref
      #{pair?}           as is_pair
      #{build-list}      as build_list
      #{procedure-arity} as procedure_arity
  rhombus/compat/stream:
    expose:
      Stream


// Goals are State -> Stream.of(State), this implementation cheats since
// there isn't an arrow annotation.
dot.macro 'goal_dot_provider $left $dot $right':
  match right
  | 'apply':       'fun (state :~ State) :~ Stream: $left(state)'
  | 'apply_empty': 'fun () :~ Stream: $left.apply(empty_state)'

annot.macro 'Goal':
  annot_meta.pack_predicate('r.#{procedure?}',
                            '(($(statinfo_meta.dot_provider_key),
                               goal_dot_provider))')

class Var (i :: Integer)
def is_var: #{Var?}

annot.macro 'Subst': 'Map.of(Var, Any)'
class State (counter :: Integer, subst :: Subst)

def empty_state :: State: State(0, {})


// walk: finds the current value (if any) for a variable in the Subst
fun walk(var, subst :~ Subst) :~ Any:
  def value: r.hash_ref(subst, var, #false)
  cond
  | is_var(value): walk(value, subst)
  | r.not(value): var
  | ~else: value


// unify: attempts to unify two terms
fun unify(u, v, subst :~ Subst):
  def u1: walk(u, subst)
  def v1: walk(v, subst)
  cond
  | is_var(u1) && is_var(v1) && u1 === v1: subst
  | is_var(u1): subst ++ {u1: v1}
  | is_var(v1): subst ++ {v1: u1}
  | r.is_pair(u1) && r.is_pair(v1):
      def s1: unify(r.car(u1), r.car(v1), subst)
      s1 && unify(r.cdr(u1), r.cdr(v1), s1)
  | ~else:
      u1 === v1 && subst


// unify_goal: construct a goal unifying two terms
fun unify_goal(u, v) :~ Goal:
  fun (state :~ State) :~ Stream:
    def subst: unify(u, v, state.subst)
    if subst
    | [State(state.counter, subst)]
    | []


// sugar for unify_goal
operator (u ≡ v):
  ~stronger_than: ∧ ∨
  ~weaker_than: + - * /
  unify_goal(u, v)


// call_with_fresh_vars: allocate some fresh variables and pass them to
// the procedure argument
fun call_with_fresh_vars(proc) :~ Goal:
  def num_vars :: Integer: r.procedure_arity(proc)
  fun (state :~ State) :~ Stream:
    fun make_var(i):
      Var(state.counter + i)
    def vars: r.build_list(num_vars, make_var)
    def new_state: State(state.counter + num_vars, state.subst)
    r.apply(proc, vars)(new_state)


// sugar for `call_with_fresh_vars`
expr.macro 'fresh ($u, $v, ...):
              $body ...
              ...':
  '(call_with_fresh_vars(fun ($u, $v, ...):
                           $body ...
                           ...)) :~ Goal'


// mplus: Monadic plus for the Stream of answers.  Similar to the paper this
// implementation alternates the two input streams allowing for breadth first
// search.
fun mplus(st0 :~ Stream, st1 :~ Stream) :~ Stream:
  cond
  | st0.is_empty: st1
  | ~else:
      stream.cons(st0.first, mplus(st1, st0.rest))


// bind: Monadic bind for the Stream of answers.
fun bind(st :~ Stream, goal :~ Goal) :~ Stream:
  cond
  | st.is_empty: []
  | ~else:
      mplus(goal(st.first), bind(st.rest, goal))


// disj: construct a disjunction goal from two goals
fun disj(g0 :~ Goal, g1 :~ Goal) :~ Goal:
  fun (state :~ State) :~ Stream:
    mplus(g0(state), g1(state))


// conj: construct a conjunction goal from two goals
fun conj(g0 :~ Goal, g1 :~ Goal) :~ Goal:
  fun (state :~ State) :~ Stream:
    bind(g0(state), g1)


// zzz: snooze operator, delays creating a goal
expr.macro 'zzz($g ...)':
  'fun (state :~ State) :~ Stream: stream.#{stream*}(($g ...)(state))'


operator ((g0 :~ Goal) ∨ (g1 :~ Goal)) :~ Goal:
  disj(g0, g1)


operator ((g0 :~ Goal) ∧ (g1 :~ Goal)) :~ Goal:
  ~stronger_than: ∨
  conj(g0, g1)


/*
expr.macro '($g0 ∨ $g1):
  '(disj($g0, zzz($g1)))

expr.macro '($g0 ∧ $g1 ...):
  ~stronger_than: ∨
  '(conj($g0, zzz($g1 ...)))
*/

// --------- Examples -----------

#//
def g:
  fresh (x, y):
    x ≡ #'red ∧ y ≡ #'beans
      ∨ x ≡ #'split ∧ y ≡ #'pea

#//
fun fives(x :: Var) :~ Goal:
  x ≡ 5 ∨ zzz(fives(x))

#//
fun sixes(x :: Var) :~ Goal:
  x ≡ 6 ∨ zzz(sixes(x))

#//
def fives_and_sixes :~ Goal:
  fresh (v):
    fives(v) ∨ sixes(v)
