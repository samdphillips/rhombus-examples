#lang rhombus

import:
  rhombus/meta open
  lib("racket/base.rkt") as r:
    rename:
      #{null?}          as is_null
      #{inexact->exact} as exact
      #{random-seed}    as random_seed
  lib("racket/list.rkt") as l

class Posn(x,y)
class Sheep(p :: Posn)
class Sheepdog(p :: Posn)
class World(width :: Int, height :: Int, entities)

def sheep_view: 10
def sheepdog_view: 25
r.random_seed(0xDEC777)

operator (a ^ b):
  ~stronger_than: * / + - <=
  ~associativity: ~right
  math.expt(a, b)

operator (a % b):
  ~weaker_than: * /
  ~stronger_than: + -
  r.modulo(a, b)

// make_world :: width height num_sheep num_sheepdogs -> World
fun make_world(width :: Int,
               height :: Int,
               num_sheep :: Int,
               num_sheepdogs :: Int):: World:
  def sheep: make_sheep(num_sheep, width, height)
  def sheepdogs: make_sheepdogs(num_sheepdogs, width, height)
  World(width, height, l.shuffle(r.append(sheep, sheepdogs)))

// make_things :: make num_things width height -> Listof thing
fun make_things(make,
                num_things :: Int,
                width :: Int,
                height :: Int):
  fun make_random(i):
    def w: r.random(0, width)
    def h: r.random(0, height)
    make(Posn(w, h))
  // XXX: this begs the question: what does `for` syntax look like in Rhombus.
  // The shrubbery proposal has some possible `for` syntax.
  r.map(make_random, l.range(num_things))

// make_sheep :: num_sheep width height -> Listof Sheep
fun make_sheep(num_sheep :: Int,
               width     :: Int,
               height    :: Int):
  make_things(fun(p): Sheep(p), num_sheep, width, height)

// make_sheepdogs :: num_sheepdogs width height -> Listof Sheepdog
fun make_sheepdogs(num_sheepdog :: Int,
                   width        :: Int,
                   height       :: Int):
  make_things(fun(p): Sheepdog(p), num_sheepdog, width, height)

def d: [Posn(-1,-1), Posn(0, -1), Posn(1, -1),
        Posn(-1, 0), Posn(0,  0), Posn(1,  0),
        Posn(-1, 1), Posn(0,  1), Posn(1,  1)]

fun distance(width, height, Posn(x0, y0), Posn(x1, y1)):
  fun step(d, cur_distsq, cur_d):
    cond
    | r.is_null(d):
        def dist: math.sqrt(cur_distsq)
        values(dist,
               Posn (r.exact(math.round(cur_d.x / dist)),
                     r.exact(math.round(cur_d.y / dist))))
    | ~else:
        def dx: (x1 + d[0].x * width) - x0
        def dy: (y1 + d[0].y * height) - y0
        def distsq: dx ^ 2 + dy ^ 2
        if r.not(cur_distsq) || distsq < cur_distsq
        | step(r.cdr(d), distsq, Posn(dx, dy))
        | step(r.cdr(d), cur_distsq, cur_d)
  step(d, #false, #false)

def width: 100
def height: 100
def entity: Sheep(Posn(50, 50))
def sight: match entity
           | Sheep(_):    sheep_view
           | Sheepdog(_): sheepdog_view
def posn: match entity
          | Sheep(p): p
          | Sheepdog(p): p
def scores: Array(0, 0, 0, 0, 0, 0, 0, 0, 0)
fun update_score(d :: Posn, v :: Number):
  def i: d.x + 1 + 3 * (d.y + 1)
  scores[i] := scores[i] + v

fun calculate_scores(others):
  cond
  | r.is_null(others): scores
  | ~else:
      def (dist :: Number, d :: Posn, score :: Int):
        match r.car(others)
        | Sheep(p):
            def (dist, d): distance(width, height, posn, p)
            values(dist, d, 1)
        | Sheepdog(p):
            def (dist, d): distance(width, height, posn, p)
            values(dist, d, -1)
      when dist <= sight
      | update_score(d, score)
      calculate_scores(r.cdr(others))

def the_world: make_world(100,100,100,100)
