#lang rhombus

submodule test:
  import:
    "stream.rhm": open

  check [1,2,3] ~is_a Stream

  check Stream(1, 2, 3) ~is_a Stream

  check Stream() ~is_a Stream.empty

  check Stream(~rest: Stream.empty) ~is_a Stream.empty

  check Stream.empty ~is_a Stream.empty

  check:
    use_static
    let v :: Stream = [1, 2, 3]
    v.first
    ~is 1

  check:
    use_static
    let v :: Stream.of(Int) = [1, 2, 3]
    v.first
    ~is 1

  check:
    use_static
    Stream.empty.is_empty
    ~is #true

  check:
    use_static
    let v :: Stream.of(String) = ["abc"]
    v.first.length()
    ~is 3

  check:
    use_static
    let v :: Stream.of(String) = ["abc"]
    Stream.first(v).length()
    ~is 3

  check:
    use_static
    let v :: Stream.of(String) = ["abc", "defg"]
    v.rest
    ~is ["defg"]

  check:
    use_static
    let v :: Stream.of(String) = ["abc", "defg"]
    v.rest.first.length()
    ~is 4

  check:
    use_static
    let v :: Stream.of(String) = ["abc", "defg"]
    v.take(1).first
    ~is "abc"

  check:
    use_static
    let v :: Stream.of(String) = ["abc", "defg"]
    v.take(1).rest
    ~is_a Stream.empty

  check:
    use_static
    let v :: Stream.of(String) = Stream("defg", "hijkl")
    let u :: Stream.of(String) = Stream("abc", ~rest: v)
    u.rest.first.length()
    ~is 4
