#lang rhombus

import:
  rhombus/meta open
  lib("racket/base.rkt") as r
  lib("racket/port.rkt") as p

export:
  port_dot_provider
  Port
  input_port_dot_provider
  InputPort
  output_port_dot_provider
  OutputPort

fun close_port(p):
 if r.#{input-port?}(p)
 | r.#{close-input-port}(p)
 | r.#{close-output-port}(p)

fun is_port(p): r.#{input-port?}(p) || r.#{output-port?}(p)

annot.macro 'Port':
  annot_meta.pack_predicate('is_port',
                            '(($(statinfo_meta.dot_provider_key),
                               port_dot_provider))')

dot.macro 'port_dot_provider $left $dot $right':
  match right
  | 'close':         'fun (): close_port($left)'

annot.macro 'InputPort':
  annot_meta.pack_predicate('r.#{input-port?}',
                            '(($(statinfo_meta.dot_provider_key),
                               input_port_dot_provider))')

dot.macro 'input_port_dot_provider $left $dot $right':
  match right
  | 'match':         'fun(arg): r.#{regexp-match}(arg, $left)'
  | 'readline':      'fun (): r.#{read-line}($left)'
  | 'readline_evt':  'fun (): p.#{read-line-evt}($left)'
  | 'close':         'fun (): r.#{close-input-port}($left)'
  | 'close_evt':     'fun (): r.#{port-closed-evt}($left)'

annot.macro 'OutputPort':
  annot_meta.pack_predicate('r.#{output-port?}',
                            '(($(statinfo_meta.dot_provider_key),
                               output_port_dot_provider))')

dot.macro 'output_port_dot_provider $left $dot $right':
  match right
  | 'display':       'fun(arg): r.display(arg, $left)'
  | 'displayln':     'fun(arg): r.displayln(arg, $left)'
  | 'flush':         'fun(): r.#{flush-output}($left)'
  | 'close':         'fun (): r.#{close-output-port}($left)'
  | 'close_evt':     'fun (): r.#{port-closed-evt}($left)'
