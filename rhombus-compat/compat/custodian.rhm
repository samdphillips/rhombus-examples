#lang rhombus/static/and_meta

import:
  lib("racket/base.rkt")

export:
  Custodian

meta:
  def custodian_statinfo = '(($(statinfo_meta.dot_provider_key), Custodian))'

annot.macro 'Custodian':
  annot_meta.pack_predicate('base.#{custodian?}', custodian_statinfo)

dot.macro
| 'Custodian $lhs $dot limit_memory':
    ~tail '($args, ...)'
    values('Custodian.limit_memory($lhs, $args, ...)', '')
| 'Custodian $lhs $dot shutdown':
    ~tail '()'
    values('Custodian.shutdown($lhs)', '')

namespace Custodian:
  export:
    current
    shutdown
    limit_memory

  def current = base.#{current-custodian}
  statinfo.macro 'current':
    '(($(statinfo_meta.call_result_key),
       $(statinfo_meta.pack(custodian_statinfo))))'

  def shutdown = base.#{custodian-shutdown-all}
  def limit_memory = base.#{custodian-limit-memory}

fun Custodian(parent :: Custodian = Custodian.current()) :~ Custodian:
  base.#{make-custodian}(parent)
